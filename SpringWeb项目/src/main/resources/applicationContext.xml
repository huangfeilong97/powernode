<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:property-placeholder location="classpath:db.properties"/>
    <!--声明数据源DataSource, 作用是连接数据库的-->
    <bean id="DataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--set注入给DruidDataSource提供连接数据库信息 -->
        <!--    使用属性配置文件中的数据，语法 ${key} -->
        <property name="url" value="${jdbc.url}" /><!--setUrl()-->
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}" />
        <property name="maxActive" value="${jdbc.max}" />
    </bean>

    <!--创建SqlSessionFactory
        mybatis中提供的SqlSessionFactoryBean类内部执行
        SqlSessionFactory  sqlSessionFactory = new ..
    -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--set注入，把数据库连接池付给了dataSource属性-->
        <property name="dataSource" ref="DataSource"/>
        <!--mybatis主配置文件的位置
           configLocation属性是Resource类型，读取配置文件
             它的赋值，使用value，指定文件的路径，使用classpath:表示文件的位置
        -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <!--创建dao对象，使用SqlSession的getMapper（StudentDao.class）
       MapperScannerConfigurer:在内部调用getMapper()生成每个dao接口的代理对象。
   -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定SqlSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定包名， 包名是dao接口所在的包名。
            MapperScannerConfigurer会扫描这个包中的所有接口，把每个接口都执行
            一次getMapper()方法，得到每个接口的dao对象。
            创建好的dao对象放入到spring的容器中的。 dao对象的默认名称是 接口名首字母小写
        -->
        <property name="basePackage" value="com.hfl.dao"/>
    </bean>

    <!--使用spring的事务处理-->
    <!--1. 声明事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="DataSource"></property>
    </bean>
    <!--2. 开启事务注解驱动，告诉spring使用注解管理事务，创建代理对象
               transaction-manager:事务管理器对象的id
    -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- aspectj配置事务通知（切面）-->
    <!--<tx:advice id="myAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="buy" propagation="REQUIRED" isolation="REPEATABLE_READ"
                       rollback-for="java.lang.NullPointerException,com.hfl.except.NotEnoughException"/>
            &lt;!&ndash;使用通配符，指定很多的方法&ndash;&gt;
            <tx:method name="add*" propagation="REQUIRES_NEW" />
            &lt;!&ndash;指定修改方法&ndash;&gt;
            <tx:method name="modify*" />
            &lt;!&ndash;删除方法&ndash;&gt;
            <tx:method name="remove*" />
            &lt;!&ndash;查询方法，query，search，find&ndash;&gt;
            <tx:method name="*" propagation="SUPPORTS" read-only="true" />
        </tx:attributes>
    </tx:advice>-->

    <!--配置aop-->
    <!--<aop:config>
        &lt;!&ndash;配置切入点表达式：指定哪些包中类，要使用事务
            id:切入点表达式的名称，唯一值
            expression：切入点表达式，指定哪些类要使用事务，aspectj会创建代理对象&ndash;&gt;
        <aop:pointcut id="servicePt" expression="execution(* * ..service..*.*(..))"/>
        &lt;!&ndash;配置增强器：关联adivce和pointcut
           advice-ref:通知，上面tx:advice哪里的配置
           pointcut-ref：切入点表达式的id
        &ndash;&gt;
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt"/>
    </aop:config>-->

    <bean id="studentService" class="com.hfl.service.Impl.StudentServiceImpl">
        <property name="studentDao" ref="studentDao"/>
    </bean>



</beans>